#!/opt/local/bin/gawk -f

BEGIN {
    privacy="public"
    priv_variables=""
    pub_variables=""
    priv_methods=""
    pub_methods=""
    priv_virts=""
    pub_virts=""
    
}

# Check for the private/public keywords...
/^[ \t]*private:/ {
    privacy="private"
}

/^[ \t]*public:/ {
    privacy="public"
}

# Match for functions...
/^[ \t]*[a-zA-Z_]+[ \t]+[a-zA-Z_]+\([^(]+;/ {
    funcTemp=""
    # Get the part up til the first parenthesis
    match($0, /[^(]+/,base)
    match($0,/\(.*\)/,arr)
    match(arr[0], /([a-zA-Z_]+ [a-zA-Z_]+(, ?)?)+/,arr2)

    arr3Len = split(arr2[0], arr3, ",")
    baseCompLen = split(base[0], baseComp, " ")
    
    if (privacy == "public")
	printf "+ "
    else
	printf "- " #%s (", base[0]

    for (i = 2; i <= baseCompLen; i++) {
	funcTemp=funcTemp baseComp[i]
	printf "%s", baseComp[i]
    }

    printf " ("
    funcTemp=funcTemp " ("
    
    for (i = 1; i <= arr3Len; i++) {
	split(arr3[i], switcher, " ")
	printf "%s%s%s", switcher[2], ":", switcher[1]
	funcTemp=funcTemp switcher[2] ":" switcher[1]
	if (i != (arr3Len)) {
	    printf ", "
	    funcTemp=funcTemp ", "
	}
    }
    printf "):%s\n",baseComp[1]
    funcTemp=funcTemp "):" baseComp[1]
    
    if (privacy == "public") {
	pub_methods=pub_methods "+ " funcTemp "\n"
    } else {
	priv_methods=priv_methods "- " funcTemp "\n"
    }
}

# Match for variables...
/^[ \t]*[a-zA-Z_]+[ \t]+[a-zA-Z_]+[^(]+;/ {
    split($0, arr1, ";")
    split(arr1[1], arr, " ")
    if ( privacy == "public" ) {
	printf "+ %s:%s\n", arr[2], arr[1]
	pub_variables=pub_variables "+ " arr[2] ":" arr[1] "\n"
    }
    else { 
	printf "- %s:%s\n", arr[2], arr[1]
	priv_variables=priv_variables "- " arr[2] ":" arr[1] "\n"
    }

}

# Match for virtual functions...
/^[ \t]*virtual[ \t]+[a-zA-Z_]+[ \t]+[a-zA-Z_]+\([^(]+;/ {
    funcTemp=""
    # Get the part up til the first parenthesis
    match($0, /[^(]+/,base)
    match($0,/\(.*\)/,arr)
    match(arr[0], /([a-zA-Z_]+ [a-zA-Z_]+(, ?)?)+/,arr2)

    arr3Len = split(arr2[0], arr3, ",")
    baseCompLen = split(base[0], baseComp, " ")
    
    if (privacy == "public")
	printf "+ "
    else
	printf "- " #%s (", base[0]

    for (i = 3; i <= baseCompLen; i++) {
	funcTemp=funcTemp baseComp[i]
	printf "%s", baseComp[i]
    }

    funcTemp=funcTemp "("
    printf " ("

    for (i = 1; i <= arr3Len; i++) {
	split(arr3[i], switcher, " ")
	printf "%s%s%s", switcher[2], ":", switcher[1]
	funcTemp=funcTemp switcher[2] ":" switcher[1]
	if (i != (arr3Len)) {
	    printf ", "
	    funcTemp=funcTemp ", "
	}
    }
    
    printf "):%s\n", baseComp[2]
    funcTemp=funcTemp "):" baseComp[2]

    if (privacy == "public") {
	pub_virts=pub_virts "v+ " funcTemp "\n"
    } else {
	priv_virts=priv_virts "v- " funcTemp "\n"
    }
}

END {

    if (pub_variables != "") {
	print ""
	print "Public Variables: "
	print pub_variables
    }

    if (priv_variables != "") {
	print ""
	print "Private Variables: "
	print priv_variables
    }

    if (pub_virts != "" || pub_methods != "") {
	print ""
	print "Pulic Functions: "
	print pub_virts
	print pub_methods
    }

    if (priv_virts != "" || priv_methods != "") {
	print ""
	print "Private Functions: "
	print priv_virts
	print priv_methods
    }
}
